{"version":3,"sources":["../../client/app/app.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,OAAO,CAAC,MAAM,CAAC,aAAa,EAAE,CAC5B,WAAW,EACX,YAAY,EACZ,YAAY,EACZ,kBAAkB,EAClB,WAAW,EACX,cAAc,CACf,CAAC,CACC,MAAM,CAAC,UAAS,cAAc,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,aAAa,EAAE;AACrF,oBAAkB,CACf,SAAS,CAAC,GAAG,CAAC,CAAC;;AAElB,mBAAiB,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;AAClC,eAAa,CAAC,YAAY,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;CACpD,CAAC,CAED,OAAO,CAAC,iBAAiB,EAAE,UAAS,UAAU,EAAE,EAAE,EAAE,QAAQ,EAAE,SAAS,EAAE;AACxE,MAAI,KAAK,CAAC;AACV,SAAO;;AAEL,WAAO,EAAE,iBAAS,MAAM,EAAE;AACxB,YAAM,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,IAAI,EAAE,CAAC;AACtC,UAAI,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;AACzB,cAAM,CAAC,OAAO,CAAC,aAAa,GAAG,SAAS,GAAG,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;OAClE;AACD,aAAO,MAAM,CAAC;KACf;;;AAGD,iBAAa,EAAE,uBAAS,QAAQ,EAAE;AAChC,UAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE;AAC3B,SAAC,KAAK,KAAK,KAAK,GAAG,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA,CAAC,CAAE,EAAE,CAAC,OAAO,CAAC,CAAC;;AAEzD,gBAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AACzB,eAAO,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;OAC5B,MACI;AACH,eAAO,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;OAC5B;KACF;GACF,CAAC;CACH,CAAC,CAED,GAAG,CAAC,UAAS,UAAU,EAAE,MAAM,EAAE,IAAI,EAAE;;AAEtC,YAAU,CAAC,GAAG,CAAC,mBAAmB,EAAE,UAAS,KAAK,EAAE,IAAI,EAAE;AACxD,QAAI,IAAI,CAAC,YAAY,EAAE;AACrB,UAAI,CAAC,UAAU,CAAC,UAAS,QAAQ,EAAE;AACjC,YAAI,CAAC,QAAQ,EAAE;AACb,eAAK,CAAC,cAAc,EAAE,CAAC;AACvB,gBAAM,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;SACpB;OACF,CAAC,CAAC;KACJ;GACF,CAAC,CAAC;CACJ,CAAC,CAAC","file":"app.js","sourcesContent":["'use strict';\n\nangular.module('meanshopApp', [\n  'ngCookies',\n  'ngResource',\n  'ngSanitize',\n  'btford.socket-io',\n  'ui.router',\n  'ui.bootstrap'\n])\n  .config(function($stateProvider, $urlRouterProvider, $locationProvider, $httpProvider) {\n    $urlRouterProvider\n      .otherwise('/');\n\n    $locationProvider.html5Mode(true);\n    $httpProvider.interceptors.push('authInterceptor');\n  })\n\n  .factory('authInterceptor', function($rootScope, $q, $cookies, $injector) {\n    var state;\n    return {\n      // Add authorization token to headers\n      request: function(config) {\n        config.headers = config.headers || {};\n        if ($cookies.get('token')) {\n          config.headers.Authorization = 'Bearer ' + $cookies.get('token');\n        }\n        return config;\n      },\n\n      // Intercept 401s and redirect you to login\n      responseError: function(response) {\n        if (response.status === 401) {\n          (state || (state = $injector.get('$state'))).go('login');\n          // remove any stale tokens\n          $cookies.remove('token');\n          return $q.reject(response);\n        }\n        else {\n          return $q.reject(response);\n        }\n      }\n    };\n  })\n\n  .run(function($rootScope, $state, Auth) {\n    // Redirect to login if route requires auth and the user is not logged in\n    $rootScope.$on('$stateChangeStart', function(event, next) {\n      if (next.authenticate) {\n        Auth.isLoggedIn(function(loggedIn) {\n          if (!loggedIn) {\n            event.preventDefault();\n            $state.go('login');\n          }\n        });\n      }\n    });\n  });\n"]}